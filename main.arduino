//input and output pins for setup
#define p1Button 3
#define p2Button 4
#define p3Button 5
#define hostButton 6

#define p1Led 8
#define p2Led 9
#define p3Led 10
#define hostLed 11

#define speaker 13

//define notes
#define NOTE_B0  31
#define NOTE_C1  33
#define NOTE_CS1 35
#define NOTE_D1  37
#define NOTE_DS1 39
#define NOTE_E1  41
#define NOTE_F1  44
#define NOTE_FS1 46
#define NOTE_G1  49
#define NOTE_GS1 52
#define NOTE_A1  55
#define NOTE_AS1 58
#define NOTE_B1  62
#define NOTE_C2  65
#define NOTE_CS2 69
#define NOTE_D2  73
#define NOTE_DS2 78
#define NOTE_E2  82
#define NOTE_F2  87
#define NOTE_FS2 93
#define NOTE_G2  98
#define NOTE_GS2 104
#define NOTE_A2  110
#define NOTE_AS2 117
#define NOTE_B2  123
#define NOTE_C3  131
#define NOTE_CS3 139
#define NOTE_D3  147
#define NOTE_DS3 156
#define NOTE_E3  165
#define NOTE_F3  175
#define NOTE_FS3 185
#define NOTE_G3  196
#define NOTE_GS3 208
#define NOTE_A3  220
#define NOTE_AS3 233
#define NOTE_B3  247
#define NOTE_C4  262
#define NOTE_CS4 277
#define NOTE_D4  294
#define NOTE_DS4 311
#define NOTE_E4  330
#define NOTE_F4  349
#define NOTE_FS4 370
#define NOTE_G4  392
#define NOTE_GS4 415
#define NOTE_A4  440
#define NOTE_AS4 466
#define NOTE_B4  494
#define NOTE_C5  523
#define NOTE_CS5 554
#define NOTE_D5  587
#define NOTE_DS5 622
#define NOTE_E5  659
#define NOTE_F5  698
#define NOTE_FS5 740
#define NOTE_G5  784
#define NOTE_GS5 831
#define NOTE_A5  880
#define NOTE_AS5 932
#define NOTE_B5  988
#define NOTE_C6  1047
#define NOTE_CS6 1109
#define NOTE_D6  1175
#define NOTE_DS6 1245
#define NOTE_E6  1319
#define NOTE_F6  1397
#define NOTE_FS6 1480
#define NOTE_G6  1568
#define NOTE_GS6 1661
#define NOTE_A6  1760
#define NOTE_AS6 1865
#define NOTE_B6  1976
#define NOTE_C7  2093
#define NOTE_CS7 2217
#define NOTE_D7  2349
#define NOTE_DS7 2489
#define NOTE_E7  2637
#define NOTE_F7  2794
#define NOTE_FS7 2960
#define NOTE_G7  3136
#define NOTE_GS7 3322
#define NOTE_A7  3520
#define NOTE_AS7 3729
#define NOTE_B7  3951
#define NOTE_C8  4186
#define NOTE_CS8 4435
#define NOTE_D8  4699
#define NOTE_DS8 4978

//button states setup
int p1State = 0;
int p2State = 0;
int p3State = 0;
int hostState = 0;

int begun = 0;
int i = 0;
int k = 0;

// tone sequence for jeopardy tune
 int melody[] = {
    NOTE_C5, NOTE_F5, NOTE_C5, NOTE_F4,
    NOTE_C5, NOTE_F5, NOTE_C5, 0,
    NOTE_C5, NOTE_F5, NOTE_C5, NOTE_F5,
    NOTE_A5, NOTE_G5, NOTE_F5, NOTE_E5, NOTE_D5, NOTE_CS5, NOTE_C5, NOTE_F5, NOTE_C5, NOTE_F4,
    NOTE_C5, NOTE_F5, NOTE_C5, 0, NOTE_F5, NOTE_D5, NOTE_C5, NOTE_AS4, NOTE_A4, NOTE_G4, NOTE_F4, 0
  };
// tone duration for jeopardy tune 
unsigned long int noteDuration[] = {
    500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 750, 250, 250, 250, 250, 250,
    500, 500, 500, 500, 500, 500, 500, 500, 750, 250, 500, 500, 500, 500, 500, 1500
  };
// Current note index (for both noteDuration and melody)
int noteIndex = 0;
// Time when current note started playing
unsigned long noteStartTime = 0;
//records when button is pressed, in order to have it turn off after a certain duration
unsigned long buttonStart = 0;


void setup() {
  // set up led, buttons and speaker
  pinMode(speaker, OUTPUT);
  pinMode(p1Button, INPUT);
  pinMode(p2Button, INPUT);
  pinMode(p3Button, INPUT);
  pinMode(hostButton, INPUT);
  pinMode(p1Led, OUTPUT);
  pinMode(p2Led, OUTPUT);
  pinMode(p3Led, OUTPUT);
  pinMode(hostLed, OUTPUT);
  
  //turns on host led to represent that the game has begun and tell user that program is running.
  digitalWrite(hostLed, HIGH);
  //start serial monitor for the purpose of debugging.
  Serial.begin(9600);
  
}

void loop() {
  music();

  read();
  
  p1();
  p2();
  p3();
  host();
  
  musicStop();
  
  }

void music() {
  // Check if it's time to move to the next note
  if (begun == 1){
    if (millis() - noteStartTime > (noteDuration[noteIndex])) {
      // Stop the tone playing on the buzzer
      noTone(speaker);
      // Play the next note on the buzzer
      tone(speaker, melody[noteIndex], (noteDuration[noteIndex]));
      // Update the note start time
      noteStartTime = millis();
      // Move to the next note in the melody and notedDuration (loop back to the start if at the end)
      noteIndex = (noteIndex + 1) % (sizeof(melody) / sizeof(int));
    }
  }
}
  
  void read(){
    p1State = digitalRead(p1Button);
    p2State = digitalRead(p2Button);
    p3State = digitalRead(p3Button);
    hostState = digitalRead(hostButton);
  }

void reset(){     
    //plays buzzer tone after the time limit
    tone(speaker, 2000, 3000);
    //turn all player LEDs off and turn the host LED back on
    digitalWrite(p1Led, LOW);
    digitalWrite(p2Led, LOW);
    digitalWrite(p3Led, LOW);
    digitalWrite(hostLed, HIGH);
    //i and k represent basic counters used to identify if a button is currently pressed to avoid multiple buttons being pressed at the same time
    i = 0;
    k = 0;
    noteIndex = 0;
    begun = 0;
  
    noTone(speaker);
}

void p1(){
  //if button is pressed and no button has already been pressed
    if(p1State == HIGH && i == 0){
      //begun = 1; starts the jeopardy music
        begun = 1;
        //turns LED for player one on and turns the host LED off
      digitalWrite(p1Led, HIGH);
      digitalWrite(hostLed, LOW);

      buttonStart = millis();
      k = 1;
      i = 1;
  }
}

void p2(){
  //if button is pressed and no button has already been pressed
    if(p2State == HIGH && i == 0){
      //begun = 1; starts the jeopardy music
      begun = 1;
      //turns LED for player two on and turns the host LED off
      digitalWrite(p2Led, HIGH);
        digitalWrite(hostLed, LOW);
      buttonStart = millis();
        k = 1;
      i = 1;
  }
}

void p3(){
  //if button is pressed and no button has already been pressed
  if(p3State == HIGH && i == 0){
    //begun = 1; starts the jeopardy music
      begun = 1;
      //turns LED for player three on and turns the host LED off
      digitalWrite(p3Led, HIGH);
      digitalWrite(hostLed, LOW);
      buttonStart = millis();
      k = 1;
      i = 1;
  }
}

void host(){
  if(hostState == HIGH && i == 1){
      Serial.println("b4");
      digitalWrite(hostLed, HIGH);
      reset();
  }
}

void musicStop(){
    if (millis()- buttonStart > 15000UL && k == 1){
    Serial.println("Reset");
    reset(); 
  }
}
